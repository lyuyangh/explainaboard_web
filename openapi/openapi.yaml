openapi: "3.0.0"
info:
  title: "ExplainaBoard"
  description: "Backend APIs for ExplainaBoard"
  version: "0.1.0"
  termsOfService: "" # TODO
  contact:
    email: "example@gmail.com" # TODO
  license:
    name: "Apache 2.0" # TODO
    url: "http://www.apache.org/licenses/LICENSE-2.0.html" # TODO

servers:
  - url: http://example.com:5000/api # TODO
    description: Optional server description, e.g. Main (production) server
  - url: http://staging.example.com:5000/api # TODO
    description: Optional server description, e.g. Internal staging server for testing
  - url: http://localhost:5000/api
    description: Local server

paths:
  /tasks:
    get:
      summary: Returns all task categories and tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TaskCategory"

  /task_metadata/{task_metadata_id}:
    get:
      summary: Returns a tasks_metadata by id
      description: Returns a dataset_metadata by id. id is the DB id so it is mostly used internally.
      parameters:
        - in: path
          name: task_metadata_id
          schema:
            type: string
          required: true
          example: "615822d5523c6bd2cf3f5c6b"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskMetadata"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"

  /task_metadata:
    get:
      summary: Returns all tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TaskMetadata"

  /task_metadata/{task_metadata_id}/datasets:
    get:
      summary: Returns a list of datasets related to the task
      parameters:
        - in: path
          name: task_metadata_id
          schema:
            type: string
          required: true
          example: "615822d5523c6bd2cf3f5c6b"
        - in: query
          name: page
          description: page number (0 indexed)
          schema:
            type: integer
            default: 0
            minimum: 0
        - in: query
          name: page_size
          description: number of items per page
          schema:
            type: integer
            default: 20
            minimum: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetsReturn"

  /datasets/{dataset_id}:
    get:
      summary: Returns dataset metadata by id
      description: Returns dataset metadata by id. id is the DB id so it is mostly used internally. See datasets MGet endpoints for general use.
      parameters:
        - in: path
          name: dataset_id
          example: 61611c3a414abfb115397ca5
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetMetadata"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"

  /datasets:
    get:
      summary: Returns a list of datasets
      description: Returns a list of datasets. Returns empty list if current page is empty. Returns `total=0` if no match datasets.
      parameters:
        - in: query
          name: dataset_name
          description: fuzzy match for dataset name
          schema:
            type: string
        - in: query
          name: task
          description: filter by task type
          schema:
            type: string
        - in: query
          name: page
          description: page number (0 indexed)
          schema:
            type: integer
            default: 0
            minimum: 0
        - in: query
          name: page_size
          description: number of items per page
          schema:
            type: integer
            default: 20
            minimum: 0

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetsReturn"

  /systems/{system_id}:
    get:
      summary: Returns system metadata info by id
      description: Returns a system_metadata by id. id is the DB id so it is mostly used internally.
      parameters:
        - in: path
          name: system_id
          schema:
            type: string
          required: true
          example: "619f8ef56e638da17b06b38a"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/System"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    delete:
      summary: Deletes a system by id
      parameters:
        - in: path
          name: system_id
          schema:
            type: string
          required: true
          example: "619f8ef56e638da17b06b38a"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "Success"

  /systems:
    get:
      summary: Returns a list of systems
      parameters:
        - in: query
          name: system_name
          description: fuzzy match for system name
          schema:
            type: string
        - in: query
          name: task
          description: filter by task type
          schema:
            type: string
        - in: query
          name: page
          description: page number (0 indexed)
          schema:
            type: integer
            default: 0
        - in: query
          name: page_size
          description: number of items per page
          schema:
            type: integer
            default: 20
        - in: query
          name: sort_field
          description: supports `created_at` (default) and metric names.
          schema:
            type: string
            example: Accuracy
        - in: query
          name: sort_direction
          schema:
            type: string
            description: default is "desc"
            example: "desc"
            enum: ["asc", "desc"]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemsReturn"

    post:
      summary: Submits a system
      description: Submits a system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  $ref: "#/components/schemas/SystemCreateProps"
                system_output:
                  $ref: "#/components/schemas/SystemOutputProps"
              required: [metadata, system_output]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/System"
        "400":
          description: INPUT ERROR
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"

  /systems/{system_id}/outputs:
    get:
      summary: Returns a list of outputs of a particular system.
      parameters:
        - in: path
          name: system_id
          description: system id
          schema:
            type: string
          required: true
          example: "61b02e0baadd2f674845b1c2"
        - in: query
          name: output_ids
          description: multiple output_ids, comma-separated
          schema:
            type: string
          example: "1,5,6"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemOutputsReturn"

components:
  # Reusable schemas (data models)
  schemas:
    # The schema for primitive types do not get generated well in flask.
    # Avoid using them.
    # TaskId:
    #   type: integer
    #   format: int64

    # DatasetId:
    #   type: integer
    #   format: int64

    APIError:
      type: object
      properties:
        error_code:
          type: integer
        detail:
          type: string
          description: error message
      required: [error_code, detail]

    Time:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          description: UTC
        last_modified:
          type: string
          format: date-time
          description: UTC
      required: [created_at, last_modified]

    TaskCategory:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/Task"
      required: [name, description, tasks]

    Task:
      type: object
      properties:
        name:
          type: string
        supported:
          type: boolean
        description:
          type: string
        supported_metrics:
          type: array
          items:
            type: string
        supported_formats:
          type: array
          items:
            type: string
      required:
        [name, supported, description, supported_metrics, supported_formats]

    PaperInfo:
      type: object
      properties:
        year:
          type: integer
        venue:
          type: string
        title:
          type: string
        author:
          type: string
        url:
          type: string
          format: uri
        bib:
          type: string

    SystemAnalysis:
      type: object
      properties:
        features:
          type: object
        results:
          type: object
          properties:
            overall:
              type: object
              description: metric_name -> metric_value
              additionalProperties:
                $ref: "#/components/schemas/Metric"
            calibration:
              type: string
            fine_grained:
              type: object
            is_print_case:
              type: boolean
            is_print_confidence_interval:
              type: boolean
          required: [overall]
      required: [features, results]

    SystemOutput:
      type: object
      properties:
        id:
          type: string
      additionalProperties: true
      required: [id]

    TaskMetadata:
      type: object
      properties:
        task_metadata_id:
          type: string
        task_name:
          type: string
        task_description:
          type: string
        task_category:
          type: array
          items:
            type: string
        datasets:
          type: object
      required: [task_metadata_id, task_name]

    SystemCreateProps:
      type: object
      properties:
        task:
          type: string
          example: "text_classification"
        dataset_metadata_id:
          type: string
        model_name:
          type: string
        metric_names:
          type: array
          items:
            type: string
          example: [Accuracy]
        language:
          type: string
          example: en
        code:
          type: string
          format: url
        download_link:
          type: string
          format: url
        paper_info:
          $ref: "#/components/schemas/PaperInfo"
      required:
        [task, dataset_metadata_id, model_name, metric_names, paper_info]

    SystemOutputProps:
      type: object
      properties:
        data:
          type: string
          format: base64
          description: base64 encoded file
        file_type:
          type: string
        task_output_type:
          type: string
          description: describes task-related system output format
      required: [data, file_type]

    System:
      allOf:
        - type: object
        - properties:
            system_id:
              type: string
            task:
              type: string
            dataset_metadata_id:
              type: string
            model_name:
              type: string
            metric_names:
              type: array
              items:
                type: string
            paper_info:
              $ref: "#/components/schemas/PaperInfo"
            language:
              type: string
              example: en
            code:
              type: string
              format: url
            download_link:
              type: string
              format: url
            analysis:
              $ref: "#/components/schemas/SystemAnalysis"
          required:
            [
              system_id,
              task,
              dataset_metadata_id,
              model_name,
              metric_names,
              paper_info,
              analysis,
            ]
        - $ref: "#/components/schemas/Time"

    Feature:
      type: object
      properties:
        type:
          type: string
        label:
          type: boolean
        raw_feature:
          type: boolean
        mapping:
          type: string
          nullable: true
        dataset_level:
          type: string
          nullable: true
        sample_level:
          type: string
          nullable: true

    DatasetMetadata:
      type: object
      properties:
        dataset_id:
          type: string
          example: "61611c3a414abfb115397ca5"
        dataset_name:
          type: string
        sub_dataset:
          type: string
          description: sub dataset id (TODO)
          nullable: true
        split:
          type: object
          additionalProperties:
            type: integer
        summary:
          type: string
        homepage:
          type: string
          format: uri
          nullable: true
        repository:
          type: string
          format: uri
          nullable: true
        paper:
          $ref: "#/components/schemas/PaperInfo"
        leaderboard:
          type: string
        person_of_contact:
          type: string
          nullable: true
        tasks:
          type: array
          items:
            type: string
            description: task name
        task_categories:
          type: array
          items:
            type: string
            description: task category name
        languages:
          type: array
          items:
            type: string
        features:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Feature"
        speaker_demographic:
          type: object
        annotator_demographic:
          type: object
        speech_situation:
          type: object
        huggingface_link:
          type: string
          format: url
      required:
        - dataset_id
        - dataset_name
        - tasks

    DatasetsReturn:
      type: object
      properties:
        datasets:
          type: array
          items:
            $ref: "#/components/schemas/DatasetMetadata"
        total:
          type: integer
          description: total number of matching datasets
          example: 20
      required:
        - datasets
        - total

    SystemOutputsReturn:
      type: object
      properties:
        system_outputs:
          type: array
          items:
            $ref: "#/components/schemas/SystemOutput"
        total:
          type: integer
          description: total number of matching system outputs
          example: 20
      required:
        - system_outputs
        - total

    SystemsReturn:
      type: object
      properties:
        systems:
          type: array
          items:
            $ref: "#/components/schemas/System"
        total:
          type: integer
          description: total number of matching systems
          example: 20
      required:
        - systems
        - total

    Metric:
      type: object
      properties:
        metric_name:
          type: string
        value:
          type: number
        confidence_score_low:
          type: number
        confidence_score_up:
          type: number
      required: [metric_name, value]

  # Security scheme definitions for authentication
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
