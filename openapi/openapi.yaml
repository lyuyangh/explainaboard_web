openapi: "3.0.0"
info:
  title: "ExplainaBoard"
  description: "Backend APIs for ExplainaBoard"
  version: "0.2.12"
  contact:
    email: "explainaboard@gmail.com"
  license:
    name: "MIT License"
    url: "https://github.com/neulab/explainaboard_web/blob/main/LICENSE"

servers:
  - url: https://explainaboard.inspiredco.ai/api
    description: Production
  - url: https://dev.explainaboard.inspiredco.ai/api
    description: Development
  - url: http://localhost:5000/api
    description: Local dev server

security:
  - ApiKeyAuth: []
  - BearerAuth: []

paths:
  /tasks:
    get:
      summary: Returns all task categories and tasks
      operationId: tasksGet
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TaskCategory"

  /languagecodes:
    get:
      summary: Return all language codes
      operationId: languageCodesGet
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LanguageCode"

  /benchmarkconfigs:
    get:
      summary: Returns all benchmark configs matching the specification
      operationId: benchmarkConfigsGet
      security: []
      parameters:
        - in: query
          name: parent_id
          example: globalbench
          schema:
            type: string
          required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BenchmarkConfig"

  /benchmark/{benchmark_id}:
    get:
      summary: Returns benchmark metadata by id
      operationId: benchmarkGetById
      security: []
      description: Returns benchmark metadata by id.
      parameters:
        - in: path
          name: benchmark_id
          example: masakhaner
          schema:
            type: string
          required: true
        - in: query
          name: by_creator
          example: true
          schema:
            type: boolean
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Benchmark"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"


  /datasets/{dataset_id}:
    get:
      summary: Returns dataset metadata by id
      operationId: datasetsGetById
      security: []
      description: |
        Returns dataset metadata by id. id is the DB id so it is mostly used internally.
        See datasets MGet endpoints for general use.
      parameters:
        - in: path
          name: dataset_id
          example: 61611c3a414abfb115397ca5
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetMetadata"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"

  /datasets:
    get:
      summary: Returns a list of datasets
      operationId: datasetsGet
      security: []
      description: |
        Returns a list of datasets. Returns empty list if current page is empty.
        Returns `total=0` if no match datasets.
      parameters:
        - in: query
          name: dataset_ids
          description: a string of comma separated dataset ids.
          schema:
            type: string
          example: "61611c3a414abfb115397ca5,61775d7f8795791d8d3846d4"
        - in: query
          name: dataset_name
          description: fuzzy match for dataset name
          schema:
            type: string
        - in: query
          name: task
          description: filter by task type
          schema:
            type: string
        - in: query
          name: page
          description: page number (0 indexed)
          schema:
            type: integer
            default: 0
            minimum: 0
        - in: query
          name: page_size
          description: number of items per page
          schema:
            type: integer
            default: 20
            minimum: 0

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetsReturn"

  /systems/{system_id}:
    get:
      summary: Returns system metadata info by id
      operationId: systemsGetById
      description: |
        Returns a system_metadata by id. id is the DB id so it is mostly used
        internally.
      parameters:
        - in: path
          name: system_id
          schema:
            type: string
          required: true
          example: "619f8ef56e638da17b06b38a"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/System"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    patch:
      summary: Updates a system by id
      operationId: systemsUpdateById
      description: Updates a system by id. See requestBody for supported fields.
      parameters:
        - in: path
          name: system_id
          schema:
            type: string
          required: true
          example: "619f8ef56e638da17b06b38a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SystemUpdateProps"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "Success"

    delete:
      summary: Deletes a system by id
      operationId: systemsDeleteById
      parameters:
        - in: path
          name: system_id
          schema:
            type: string
          required: true
          example: "619f8ef56e638da17b06b38a"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "Success"

  /systems:
    get:
      summary: Returns a list of systems
      operationId: systemsGet
      description: only public systems are returned for unauthenticated requests
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
        - {}

      parameters:
        - in: query
          name: system_name
          description: fuzzy match for system name
          schema:
            type: string
        - in: query
          name: task
          description: filter by task type
          schema:
            type: string
        - in: query
          name: dataset
          description: dataset name
          schema:
            type: string
        - in: query
          name: subdataset
          description: subdataset name
          schema:
            type: string
        - in: query
          name: split
          description: dataset split
          schema:
            type: string
        - in: query
          name: page
          description: page number (0 indexed)
          schema:
            type: integer
            default: 0
        - in: query
          name: page_size
          description: number of items per page
          schema:
            type: integer
            default: 20
        - in: query
          name: sort_field
          description: >
            Supports `created_at` (default) and metric names. Metric names should be
            provided as {analysis_level}.{metric_name}
          schema:
            type: string
            example: example.Accuracy
        - in: query
          name: sort_direction
          schema:
            type: string
            description: default is "desc"
            example: "desc"
            enum: ["asc", "desc"]
        - in: query
          name: creator
          schema:
            type: string
            description: id of the creator
        - in: query
          name: shared_users
          schema:
            type: array
            items:
              type: string
            description: list of emails with whom the system is shared

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemsReturn"

    post:
      summary: Submits a system
      operationId: systemsPost
      description: Submits a system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SystemCreateProps"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/System"
        "400":
          description: INPUT ERROR
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"

  /systems/{system_id}/outputs:
    get:
      summary: Returns a list of outputs of a particular system.
      operationId: systemOutputsGetById
      description: This will fail if the user doesn't have permissions for that system.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
        - {}
      parameters:
        - in: path
          name: system_id
          description: system id
          schema:
            type: string
          required: true
          example: "61b02e0baadd2f674845b1c2"
        - in: query
          name: output_ids
          description: multiple output_ids
          schema:
            type: array
            items:
              type: integer
          example: [1, 5, 6]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SystemOutput"

  /systems/{system_id}/cases:
    get:
      summary: Returns a list of analysis cases of a particular system.
      operationId: systemCasesGetById
      description: This will fail if the user doesn't have permissions for that system.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
        - {}
      parameters:
        - in: path
          name: system_id
          description: system id
          schema:
            type: string
          required: true
          example: "61b02e0baadd2f674845b1c2"
        - in: query
          name: level
          description: analysis level
          schema:
            type: string
          required: true
          example: "example"
        - in: query
          name: case_ids
          description: multiple output_ids
          schema:
            type: array
            items:
              type: integer
          example: [1, 5, 6]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnalysisCase"

  /systems/analyses:
    post:
      summary: Returns analysis result(s) of one or multiple systems
      operationId: systemsAnalysesPost
      description: Returns analysis result(s) of one or multiple systems
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
        - {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                system_ids:
                  description: a string representing a system id
                  type: string
                  example: "61b02e0baadd2f674845b1c2,6254e4cd0f1133e7436ef298"
                feature_to_bucket_info:
                  description: feature -> bucket info
                  type: object
                  additionalProperties:
                    type: object
                    properties:
                      number:
                        type: integer
                      setting:
                        type: array
                        items:
                          type: array
                          items:
                            type: number
                          minItems: 2
                          maxItems: 2
                        example: [[0.0, 0.4], [0.4, 1.0]]
              required:
                [system_ids, feature_to_bucket_info]

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemAnalysesReturn"

  /info:
    get:
      summary: |
        information for environment identifier, backend version, login URL, etc.
        (not intent for public users)
      operationId: infoGet
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  env:
                    type: string
                  auth_url:
                    type: string
                    format: url
                  api_version:
                    type: string
                required: [env, auth_url, api_version]
  /user:
    get:
      summary: get user info
      operationId: userGet
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: basic
      description: use user email and API key to authenticate
    BearerAuth:
      type: http
      scheme: bearer
      description: use JWT to authenticate (for web app only)

  schemas:
    # The schema for primitive types do not get generated well in flask.
    # Avoid using them.
    # TaskId:
    #   type: integer
    #   format: int64

    # DatasetId:
    #   type: integer
    #   format: int64

    AnyType:
      oneOf:
        - type: boolean
        - type: integer
          nullable: true
        - type: string
          nullable: true
        - type: array
          items: {}
        - type: object

    Value:
      type: object
      properties:
        dtype:
          type: string
        description:
          type: string
          nullable: true
        is_bucket:
          type: boolean
        require_training_set:
          type: boolean
        bucket_info:
          # TODO(chihhao) define detailed fields
          type: object
          nullable: true
        id:
          type: string
          nullable: true
        cls_name:
          type: string

    ClassLabel:
      type: object
      properties:
        num_classes:
          type: integer
        names:
          type: array
          items:
            type: string
        description:
          type: string
          nullable: true
        names_file:
          type: string
          nullable: true
        id:
          type: string
          nullable: true
        is_bucket:
          type: boolean
        require_training_set:
          type: boolean
        bucket_info:
          type: object
          nullable: true
        cls_name:
          type: string

    Analysis:
      description: The specification of an analysis to return
      type: object
      properties:
        cls_name:
          type: string
        description:
          type: string
          nullable: true
      additionalProperties: true
      required: [cls_name]

    AnalysisLevel:
      description: A level of analysis to be performed
      type: object
      properties:
        name:
          type: string
        features:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/FeatureType"
        metric_configs:
          type: array
          items:
            $ref: "#/components/schemas/MetricConfig"
      required: [name, features, metric_configs]

    MetricConfig:
      type: object
      properties:
        name:
          type: string
        source_language:
          type: string
          nullable: true
        target_language:
          type: string
          nullable: true
        cls_name:
          type: string
      additionalProperties: true
      required: [name, cls_name]

    FeatureType:
      type: object
      properties:
        dtype:
          type: string
          nullable: true
        cls_name:
          type: string
        description:
          type: string
          nullable: true
        func:
          type: string
          nullable: true
        require_training_set:
          type: boolean
          nullable: true
      additionalProperties: true
      required: [cls_name]

    SystemInfo:
      description: |
        Information about a system output, used in SDK's fine-grained analysis
      type: object
      properties:
        task_name:
          type: string
          example: "text-classification"
        system_name:
          type: string
          example: "sst2-cnn"
        source_language:
          type: string
          example: en
        target_language:
          type: string
          example: en
        reload_stat:
          type: boolean
        confidence_alpha:
          type: number
        analysis_levels:
          type: array
          items:
            $ref: "#/components/schemas/AnalysisLevel"
        analyses:
          type: array
          items:
            $ref: "#/components/schemas/Analysis"
        source_tokenizer:
          $ref: "#/components/schemas/Tokenizer"
        target_tokenizer:
          $ref: "#/components/schemas/Tokenizer"
        results:
          type: object
          properties:
            overall:
              type: array
              description: metrics for each analysis level
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Performance"
          required: [overall]
        dataset_name:
          type: string
          nullable: true
        sub_dataset_name:
          type: string
          nullable: true
        dataset_split:
          type: string
          nullable: true
        system_details:
          type: object
          nullable: true
      required:
        [
          task_name,
          system_name,
          source_language,
          target_language,
          reload_stat,
          confidence_alpha,
          source_tokenizer,
          target_tokenizer,
          analysis_levels,
          analyses,
          results,
        ]

    Tokenizer:
      type: object
      properties:
        cls_name:
          type: string
          example: "SingleSpaceTokenizer"
        variety:
          type: string
          example: "intl"

    APIError:
      type: object
      properties:
        error_code:
          type: integer
        detail:
          type: string
          description: error message
      required: [error_code, detail]

    Time:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          description: UTC
        last_modified:
          type: string
          format: date-time
          description: UTC
      required: [created_at, last_modified]

    TaskCategory:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/Task"
      required: [name, description, tasks]

    Task:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        supported_metrics:
          type: array
          items:
            type: string
        supported_formats:
          type: object
          properties:
            custom_dataset:
              type: array
              items:
                type: string
            system_output:
              type: array
              items:
                type: string
          required: [custom_dataset, system_output]
      required: [name, description, supported_metrics, supported_formats]

    LanguageCode:
      type: object
      properties:
        name:
          type: string
        iso3_code:
          type: string
        iso1_code:
          type: string
      required: [name, iso3_code]

    SystemOutput:
      type: object
      properties:
        id:
          type: string
      additionalProperties: true
      required: [id]

    TaskMetadata:
      type: object
      properties:
        task_metadata_id:
          type: string
        task_name:
          type: string
        task_description:
          type: string
        task_category:
          type: array
          items:
            type: string
        datasets:
          type: object
      required: [task_metadata_id, task_name]

    SystemUpdateProps:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/SystemMetadataUpdatable"
      required: [metadata]

    SystemCreateProps:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/SystemMetadata"
        system_output:
          $ref: "#/components/schemas/SystemOutputProps"
        custom_dataset:
          $ref: "#/components/schemas/SystemOutputProps"
      required: [metadata, system_output]

    SystemMetadataUpdatable:
      properties:
        system_name:
          type: string
        system_details:
          type: object
          description: a place to store arbitrary system details you want to remember
        is_private:
          type: boolean
          default: true
        shared_users:
          type: array
          items:
            type: string
          description: space-separated list of emails with which system is shared
          example: ["hello@gmail.com", "world@gmail.com"]
      required:
        [
          is_private,
          system_name,
        ]

    SystemMetadata:
      type: object
      properties:
        task:
          type: string
          example: "text_classification"
        system_name:
          type: string
        metric_names:
          type: array
          items:
            type: string
          example: [Accuracy]
        source_language:
          type: string
          example: en
        target_language:
          type: string
          example: en
        is_private:
          type: boolean
          default: true
        shared_users:
          type: array
          items:
            type: string
          description: space-separated list of emails with which system is shared
          example: ["hello@gmail.com", "world@gmail.com"]
        dataset_metadata_id:
          type: string
        dataset_split:
          type: string
          description: required if dataset_metadata_id specified
          example: test
        system_details:
          type: object
          description: a place to store arbitrary system details you want to remember
      required:
        [
          task,
          is_private,
          system_name,
          metric_names,
          source_language,
          target_language,
        ]

    SystemOutputProps:
      type: object
      properties:
        data:
          type: string
          format: base64
          description: base64 encoded file
        file_type:
          type: string
      required: [data, file_type]

    System:
      allOf:
        - type: object
        - properties:
            system_id:
              type: string
            system_name:
              type: string
            is_private:
              type: boolean
            source_language:
              type: string
              example: en
            target_language:
              type: string
              example: en
            task:
              type: string
              example: "text-classification"
            creator:
              type: string
              description: the user who created the system
            preferred_username:
              type: string
            metric_names:
              description: >
                metric_names selected when the system is created. It is the same as
                the metric_names field in SystemMetadata.
              type: array
              items:
                type: string
              example: [Accuracy, F1]
            results:
              type: object
              example: {"span": {"F1": 0.9221}}
              additionalProperties:
                type: object
                additionalProperties:
                  type: number
            shared_users:
              type: array
              items:
                type: string
              description: list of emails with which system is shared
            # TODO(chihhao) Deduplication of dataset information here and in system_info
            dataset:
              description: if not specified, it is undefined
              type: object
              nullable: true
              properties:
                dataset_id:
                  type: string
                split:
                  type: string
                dataset_name:
                  type: string
                sub_dataset:
                  type: string
                  nullable: true
              required: [dataset_id, dataset_name, split]
            system_details:
              type: object
              description: |
                a place to store arbitrary system details you want to remember
          required:
            - system_id
            - creator
            - preferred_username
            - system_name
            - is_private
            - source_language
            - target_language
            - task
            - metric_names
            - results
        - $ref: "#/components/schemas/Time"

    DatasetFeature:
      type: object
      properties:
        type:
          type: string
        label:
          type: boolean
        raw_feature:
          type: boolean
        mapping:
          type: string
          nullable: true
        dataset_level:
          type: string
          nullable: true
        sample_level:
          type: string
          nullable: true

    DatasetMetadata:
      type: object
      properties:
        dataset_id:
          type: string
          example: "61611c3a414abfb115397ca5"
        dataset_name:
          type: string
        tasks:
          type: array
          items:
            type: string
            description: task name
        sub_dataset:
          type: string
          description: sub dataset id (TODO)
          nullable: true
        split:
          type: object
          additionalProperties:
            type: integer
        summary:
          type: string
        homepage:
          type: string
          format: uri
          nullable: true
        repository:
          type: string
          format: uri
          nullable: true
        leaderboard:
          type: string
        person_of_contact:
          type: string
          nullable: true
        task_categories:
          type: array
          items:
            type: string
            description: task category name
        languages:
          type: array
          items:
            type: string
        features:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DatasetFeature"
        speaker_demographic:
          type: object
        annotator_demographic:
          type: object
        speech_situation:
          type: object
        huggingface_link:
          type: string
          format: url
        custom_features:
          type: object
      required:
        - dataset_id
        - dataset_name
        - tasks

    DatasetsReturn:
      type: object
      properties:
        datasets:
          type: array
          items:
            $ref: "#/components/schemas/DatasetMetadata"
        total:
          type: integer
          description: total number of matching datasets
          example: 20
      required:
        - datasets
        - total

    SystemsReturn:
      type: object
      properties:
        systems:
          type: array
          items:
            $ref: "#/components/schemas/System"
        total:
          type: integer
          description: total number of matching systems
          example: 20
      required:
        - systems
        - total

    AnalysisResult:
      type: object
      properties:
        name:
          type: string
        cls_name:
          type: string
      additionalProperties: true

    BucketPerformance:
      type: object
      properties:
        n_samples:
          type: number
        bucket_samples:
          type: array
          items:
            type: number
        performances:
          type: array
          items:
            $ref: "#/components/schemas/Performance"
        bucket_name:
          type: string
        bucket_interval:
          type: array
          items:
            type: number
      required: [n_samples, bucket_samples, performances]

    SingleAnalysis:
      type: object
      properties:
        system_info:
          $ref: "#/components/schemas/SystemInfo"
        analysis_results:
          type: array
          description: results for each analysis level
          items:
            $ref: "#/components/schemas/AnalysisResult"
      required: [system_info, analysis_results]

    SystemAnalysesReturn:
      type: object
      properties:
        system_analyses:
          type: array
          items:
            $ref: "#/components/schemas/SingleAnalysis"
        significance_test_info:
          type: array
          items:
            $ref: "#/components/schemas/SignificanceTestInfo"
      required: [system_analyses]

    Performance:
      type: object
      properties:
        metric_name:
          type: string
        value:
          type: number
        confidence_score_low:
          type: number
          nullable: true
        confidence_score_high:
          type: number
          nullable: true
      required: [metric_name, value]

    ComboCount:
      type: object
      properties:
        bucket:
          type: array
          items:
            type: string
        count:
          type: number
        samples:
          type: array
          items:
            type: integer
      required: [bucket, count, samples]


    AnalysisCase:
      type: object
      properties:
        sample_id:
          type: integer
      additionalProperties: true

    BenchmarkMetric:
      type: object
      properties:
        name:
          type: string
        weight:
          type: number
        default:
          type: number
      required: [name]

    BenchmarkOperationConfig:
      type: object
      properties:
        op:
          type: string
      additionalProperties: true

    BenchmarkViewConfig:
      type: object
      properties:
        name:
          type: string
        operations:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkOperationConfig'

    BenchmarkDatasetConfig:
      type: object
      properties:
        dataset_name:
          type: string
        sub_dataset:
          type: string
        split:
          type: string
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkMetric'
      additionalProperties: true
      required: [dataset_name]

    BenchmarkConfig:
      type: object
      properties:
        name:
          type: string
        views:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkViewConfig'
        id:
          type: string
        description:
          type: string
        type:
          type: string
          description: |
            "could be 'abstract' to indicate this doesn't fully specify a benchmark"
        parent:
          type: string
          description: "a parent benchmark that this benchmark inherits config from"
        visibility:
          type: string
          description: "a visibility level, public/hidden/none"
        logo:
          type: string
        contact:
          type: string
        homepage:
          type: string
        paper:
          type: object
          $ref: "#/components/schemas/Paper"
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkMetric'
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkDatasetConfig'
        system_query:
          type: object
        default_views:
          type: array
          items:
            type: string
      required: [name, views]

    SignificanceTestInfo:
      type: object
      properties:
        metric_name:
          type: string
          description: the name of evaluation metric
        result_description:
          type: string
        method_description:
          type: string
        test_name:
          type: string
          description: the name of the test
        test_data:
          type: object
          description: fine-grained data regarding the test


    BenchmarkTableData:
      type: object
      properties:
        name:
          type: string
        system_names:
          type: array
          description: the name of each system participating
          items:
            type: string
        column_names:
          type: array
          description: the name of each column
          items:
            type: string
        scores:
          type: array
          description: the values of scores in each row/column
          items:
            type: array
            items:
              type: number
        plot_y_values:
          type: array
          items:
            type: number
        plot_x_values:
          type: array
          items:
            type: string
      required: [name, system_names, column_names, scores, plot_y_values, plot_x_values]

    Benchmark:
      type: object
      properties:
        config:
          $ref: "#/components/schemas/BenchmarkConfig"
        views:
          type: array
          items:
            $ref: "#/components/schemas/BenchmarkTableData"
        time:
          type: string
      required: [config]

    Paper:
      type: object
      properties:
        title:
          type: string
        url:
          type: string
      required: [title, url]

    User:
      type: object
      properties:
        id:
          description: a unique identifier for the authenticated user.
          type: string
        email:
          type: string
        api_key:
          type: string
        preferred_username:
          type: string
      required: [id, email, api_key, preferred_username]
