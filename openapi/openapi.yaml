openapi: "3.0.0"
info:
  title: "ExplainaBoard"
  description: "Backend APIs for ExplainaBoard"
  version: "0.1.0"
  termsOfService: "" # TODO
  contact:
    email: "example@gmail.com" # TODO
  license:
    name: "Apache 2.0" # TODO
    url: "http://www.apache.org/licenses/LICENSE-2.0.html" # TODO

servers:
  - url: http://example.com:5000/api # TODO
    description: Optional server description, e.g. Main (production) server
  - url: http://staging.example.com:5000/api # TODO
    description: Optional server description, e.g. Internal staging server for testing
  - url: http://localhost:5000/api
    description: Local server

paths:
  /task_metadata/{task_metadata_id}:
    get:
      summary: Returns a tasks_metadata by id
      description: Returns a dataset_metadata by id. id is the DB id so it is mostly used internally.
      parameters:
        - in: path
          name: task_metadata_id
          schema:
            type: string
          required: true
          example: "615822d5523c6bd2cf3f5c6b"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskMetadata"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /task_metadata:
    get:
      summary: Returns all tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TaskMetadata"

  /task_metadata/{task_metadata_id}/datasets:
    get:
      summary: Returns a list of datasets related to the task
      parameters:
        - in: path
          name: task_metadata_id
          schema:
            type: string
          required: true
          example: "615822d5523c6bd2cf3f5c6b"
        - in: query
          name: page
          description: page number (0 indexed)
          schema:
            type: integer
            default: 0
            minimum: 0
        - in: query
          name: page_size
          description: number of items per page
          schema:
            type: integer
            default: 20
            minimum: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetsReturn"

  /system_metadata/{system_metadata_id}:
    get:
      summary: Returns a system_metadata by id
      description: Returns a system_metadata by id. id is the DB id so it is mostly used internally.
      parameters:
        - in: path
          name: system_metadata_id
          schema:
            type: string
          required: true
          example: "618c8af297d899127212916f"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemMetadata"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /datasets/{dataset_id}:
    get:
      summary: Returns dataset metadata by id
      description: Returns dataset metadata by id. id is the DB id so it is mostly used internally. See datasets MGet endpoints for general use.
      parameters:
        - in: path
          name: dataset_id
          example: 61611c3a414abfb115397ca5
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetMetadata"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /datasets:
    get:
      summary: Returns a list of datasets
      description: Returns a list of datasets. Returns empty list if current page is empty. Returns `total=0` if no match datasets.
      parameters:
        - in: query
          name: dataset_name
          description: fuzzy match for dataset name
          schema:
            type: string
        - in: query
          name: task
          description: filter by task type
          schema:
            type: string
        - in: query
          name: page
          description: page number (0 indexed)
          schema:
            type: integer
            default: 0
            minimum: 0
        - in: query
          name: page_size
          description: number of items per page
          schema:
            type: integer
            default: 20
            minimum: 0

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetsReturn"

  /systems/{system_id}:
    get:
      summary: Returns a system and its report
      description: Returns a system and its report
      parameters:
        - in: path
          name: system_id
          required: true
          example: "6178746a42455b0303bd8d09"
          schema:
            type: string

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/System"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a system and its report
      description: TBD
      parameters:
        - in: path
          name: system_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/System"
        "401":
          description: NOT AUTHORIZED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: INPUT ERROR
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /systems:
    get:
      summary: Returns a list of systems and their reports
      description: Returns a list of systems and their reports
      parameters:
        - in: query
          name: system_name
          description: fuzzy match for system name
          schema:
            type: string
        - in: query
          name: task
          description: filter by task type
          schema:
            type: string
        - in: query
          name: page
          description: page number (0 indexed)
          schema:
            type: integer
            default: 0
        - in: query
          name: page_size
          description: number of items per page
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  systems:
                    type: array
                    items:
                      $ref: "#/components/schemas/System"
                  total:
                    type: integer
                    description: total number of matching datasets
                    example: 20
    post:
      summary: Submits a system
      description: Submits a system (TBD)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/System"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/System"
        "401":
          description: NOT AUTHORIZED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: INPUT ERROR
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /results:
    get:
      deprecated: true
      summary: Returns a list of system prediction results
      description: Returns a list of system prediction results
      security:
        - ApiKeyAuth: []
        - OAuth2: ["read"]
      parameters:
        - in: query
          name: task_id
          schema:
            type: integer
            format: int64
        - in: query
          name: dataset_id
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Results"
  /result:
    post:
      deprecated: true
      summary: Upload a system prediction result
      description: Upload a system prediction result
      security:
        - ApiKeyAuth: []
        - OAuth2: ["write"]
      requestBody:
        description: A system prediction result
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Result"
      responses:
        "200":
          description: OK

  /lb-results:
    get:
      deprecated: true
      summary: Returns a list of leaderboard results
      description: Returns a list of leaderboard results
      security: []
      parameters:
        - in: query
          name: task_id
          schema:
            type: integer
            format: int64
        - in: query
          name: dataset_id
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LbResults"

components:
  # Reusable schemas (data models)
  schemas:
    # The schema for primitive types do not get generated well in flask.
    # Avoid using them.
    # TaskId:
    #   type: integer
    #   format: int64

    # DatasetId:
    #   type: integer
    #   format: int64

    Error:
      type: object
      properties:
        error_code:
          type: integer
        detail:
          type: string
          description: error message

    Time:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          description: UTC
        last_modified:
          type: string
          format: date-time
          description: UTC

    PaperInfo:
      type: object
      properties:
        year:
          type: integer
        venue:
          type: string
        title:
          type: string
        author:
          type: string
        url:
          type: string
          format: uri
        bib:
          type: string

    # basic result schema extended by Result and LbResult
    BasicResult:
      type: object
      properties:
        task_id:
          type: integer
          format: int64
        dataset_id:
          type: integer
          format: int64
        model_name:
          type: string
        paper_info:
          $ref: "#/components/schemas/PaperInfo"
      required:
        - task_id
        - dataset_id
        - model_name
        - paper_info

    # result that users upload and view
    Result:
      # extends BasicResult
      allOf:
        - $ref: "#/components/schemas/BasicResult"
        - type: object
        - properties:
            # we might want to group results by tasks (e.g. NER, MLT,...)
            summary:
              type: string
            privacy_setting:
              type: array
              # public: [], private: [current user id], list of user ids: [id1, id2, id3]
              items:
                type: integer
            system_prediction:
              # no strict definition since every task has a different output
              # if we want to be strict, we can have a schema for each task
              # and use an enum here.
              type: object
            system_metadata:
              type: object
            system_confidences:
              type: object
        - required:
            - task_id
            - dataset_id
            - model_name
            - paper_info
            - privacy_setting
            - system_prediction

    # returning array is bad design
    # so we wrap using an object with key named payload
    Results:
      type: object
      properties:
        payload:
          type: array
          items:
            $ref: "#/components/schemas/Result"

    # result on leaderboard
    LbResult:
      allOf:
        - $ref: "#/components/schemas/BasicResult"
        - type: object
        - properties:
            # TODO multiple metrics
            metric:
              type: string
            score:
              type: string
            # TODO clarify format, applies to all tasks?
            data_bias:
              type: object
        - required:
            - task_id
            - dataset_id
            - model_name
            - paper_info
            - metric
            - score
            - data_bias

    LbResults:
      type: object
      properties:
        payload:
          type: array
          items:
            $ref: "#/components/schemas/LbResult"

    # TODO API output (evaluation of uploaded result)

    TaskMetadata:
      type: object
      properties:
        task_metadata_id:
          type: string
        task_name:
          type: string
        task_description:
          type: string
        task_category:
          type: array
          items:
            type: string
        datasets:
          type: object

    SystemMetadata:
      type: object
      properties:
        task:
          type: string
        dataset_metadata_ids:
          type: array
          items:
            type: string
        model_name:
          type: string
        dataset_name:
          type: string
        paper_info:
          $ref: "#/components/schemas/PaperInfo"
        # TODO complete other fields

    Feature:
      type: object
      properties:
        type:
          type: string
        label:
          type: boolean
        raw_feature:
          type: boolean
        mapping:
          type: string
          nullable: true
        dataset_level:
          type: string
          nullable: true
        sample_level:
          type: string
          nullable: true

    DatasetMetadata:
      allOf:
        - type: object
        - properties:
            dataset_id:
              type: string
              example: "61611c3a414abfb115397ca5"
            dataset_name:
              type: string
            sub_dataset:
              type: string
              description: sub dataset id (TODO)
              nullable: true
            split:
              type: object
              additionalProperties:
                type: integer
            summary:
              type: string
            homepage:
              type: string
              format: uri
              nullable: true
            repository:
              type: string
              format: uri
              nullable: true
            paper:
              $ref: "#/components/schemas/PaperInfo"
            leaderboard:
              type: string
            person_of_contact:
              type: string
              nullable: true
            task:
              type: array
              items:
                type: string
                description: task name
            task_category:
              type: array
              items:
                type: string
                description: task category name
            languages:
              type: array
              items:
                type: string
            features:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/Feature"
            speaker_demographic:
              type: object
            annotator_demographic:
              type: object
            speech_situation:
              type: object
            huggingface_link:
              type: string
              format: url
          required:
            - dataset_id
            - dataset_name
            - task

        - $ref: "#/components/schemas/Time"

    DatasetsReturn:
      type: object
      properties:
        datasets:
          type: array
          items:
            $ref: "#/components/schemas/DatasetMetadata"
        total:
          type: integer
          description: total number of matching datasets
          example: 20
      required:
        - datasets
        - total

    MetricResult:
      type: object
      properties:
        metric_name:
          type: string
        value:
          type: number
        confidence_score_low:
          type: number
        bucket_name:
          type: array
          items:
            type: string
        n_samples:
          type: integer
        bucket_samples:
          type: array
          items:
            type: string

    System:
      allOf:
        - type: object
        - properties:
            system_id:
              type: string
              description: unique ID (from DB)
            task_name:
              type: string
            system_name:
              type: string
              description: title (a description of the system, non unique)
            metric_names:
              type: array
              items:
                type: string
            language:
              type: string
            code:
              type: string
              nullable: true
            download_link:
              type: string
              nullable: true
            paper_info:
              $ref: "#/components/schemas/PaperInfo"
            features:
              type: object
              additionalProperties:
                type: object
                description: fields seem to be different for different features
            results:
              type: object
              properties:
                overall:
                  type: object
                calibration:
                  type: string
                  nullable: true
                fine_grained:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      type: array
                      items:
                        $ref: "#/components/schemas/MetricResult"
            is_print_case:
              type: boolean
            is_print_confidence_interval:
              type: boolean

        - $ref: "#/components/schemas/Time"

  # Security scheme definitions for authentication
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
