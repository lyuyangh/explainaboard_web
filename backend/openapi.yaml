openapi: "3.0.0"
info:
  title: "ExplainaBoard"
  description: "Backend API for ExplainaBoard"
  version: "0.1.0"
  termsOfService: "" # TODO
  contact:
    email: "example@gmail.com" # TODO
  license:
    name: "Apache 2.0" # TODO
    url: "http://www.apache.org/licenses/LICENSE-2.0.html" # TODO

servers:
  - url: http://example.com:5000/api # TODO
    description: Optional server description, e.g. Main (production) server
  - url: http://staging.example.com:5000/api # TODO
    description: Optional server description, e.g. Internal staging server for testing
  - url: http://localhost:5000/api
    description: Local server

paths:
  /results:
    get:
      summary: Returns a list of system prediction results
      description: Returns a list of system prediction results
      security:
        - ApiKeyAuth: []
        - OAuth2: ["read"]
      parameters:
        - in: query
          name: task_id
          schema:
            type: integer
            format: int64
        - in: query
          name: dataset_id
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results'
  /result:
    post:
      summary: Upload a system prediction result
      description: Upload a system prediction result
      security:
        - ApiKeyAuth: []
        - OAuth2: ["write"]
      requestBody:
        description: A system prediction result
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Result"
      responses:
        "200":
          description: OK

  /lb-results:
    get:
      summary: Returns a list of leaderboard results
      description: Returns a list of leaderboard results
      security: []
      parameters:
        - in: query
          name: task_id
          schema:
            type: integer
            format: int64
        - in: query
          name: dataset_id
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LbResults"

  /datasets/{dataset_id}:
    get:
      summary: Returns a dataset by id
      description: Returns a dataset by id
      parameters:
        - in: path
          name: dataset_id
          schema:
            type: integer
            format: int64
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
  /datasets:
    get:
      summary: Returns a list of datasets
      description: Returns a list of datasets
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datasets'

components:
  # Reusable schemas (data models)
  schemas:
  
    # The schema for primitive types do not get generated well in flask.
    # Avoid using them.
    # TaskId:
    #   type: integer
    #   format: int64

    # DatasetId:
    #   type: integer
    #   format: int64

    PaperInfo:
      type: object
      properties:
        author:
          type: string
        title:
          type: string
        link:
          type: string
          format: uri
        bib:
          type: string
        year:
          type: integer
          format: int64
        conference:
          type: string
      required:
        - author
        - title
        - link
        - bib
        - year
        - conference

    # basic result schema extended by Result and LbResult
    BasicResult:
      type: object
      properties:
        task_id:
          type: integer
          format: int64
        dataset_id:
          type: integer
          format: int64
        model_name:
          type: string
        paper_info:
          $ref: "#/components/schemas/PaperInfo"
      required:
        - task_id
        - dataset_id
        - model_name
        - paper_info

    # result that users upload and view
    Result:
      # extends BasicResult
      allOf:
        - $ref: "#/components/schemas/BasicResult"
        - type: object
        - properties:
            # we might want to group results by tasks (e.g. NER, MLT,...)
            summary:
              type: string
            privacy_setting:
              type: array
              # public: [], private: [current user id], list of user ids: [id1, id2, id3]
              items:
                type: integer
            system_prediction:
              # no strict definition since every task has a different output
              # if we want to be strict, we can have a schema for each task
              # and use an enum here.
              type: object
            system_metadata:
              type: object
            system_confidences:
              type: object
        - required:
            - task_id
            - dataset_id
            - model_name
            - paper_info
            - privacy_setting
            - system_prediction
    
    # returning array is bad design
    # so we wrap using an object with key named payload
    Results:
      type: object
      properties:
        payload:
          type: array
          items:
            $ref: "#/components/schemas/Result"

    # result on leaderboard
    LbResult:
      allOf:
        - $ref: "#/components/schemas/BasicResult"
        - type: object
        - properties:
            # TODO multiple metrics
            metric:
              type: string
            score:
              type: string
            # TODO clarify format, applies to all tasks?
            data_bias:
              type: object
        - required:
            - task_id
            - dataset_id
            - model_name
            - paper_info
            - metric
            - score
            - data_bias
    
    LbResults:
      type: object
      properties:
        payload:
          type: array
          items:
            $ref: "#/components/schemas/LbResult"

    # TODO API output (evaluation of uploaded result)

    Dataset:
      type: object
      properties:
        dataset_id:
          type: integer
          format: int64
        parent_dataset_id:
          type: integer
          format: int64
          nullable: true
        task_id:
          type: integer
          format: int64
        summary:
          type: string
        homepage:
          type: string
          format: uri
        repository:
          type: string
          format: uri
        # what is paper id? not url?
        paper_id:
          type: integer
        # not email or url?
        point_of_contact_id:
          type: integer
      required:
        - dataset_id
        - summary
        - task_id
    
    Datasets:
      type: object
      properties:
        payload:
          type: array
          items:
            $ref: "#/components/schemas/Dataset"    
    
  # Security scheme definitions for authentication
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
