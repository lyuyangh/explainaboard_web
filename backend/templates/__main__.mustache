import connexion
import os
from explainaboard_web.impl.config import ProductionConfig, DevelopmentConfig
from {{packageName}} import encoder

# Custom Middleware for CORS headers
# reference: https://github.com/zalando/connexion/issues/357
class CorsHeaderMiddleware(object):
    def __init__(self, app):
        self.app = app

    def __call__(self, environ, start_response):
        def custom_start_response(status, headers, exc_info=None):
            headers.append(('Access-Control-Allow-Origin', '*'))
            return start_response(status, headers, exc_info)

        return self.app(environ, custom_start_response)

def main():
    app = connexion.App(__name__, specification_dir='./swagger/', server_args={
                        'static_folder': '../frontend', 'static_url_path': '/'})
    app.app.json_encoder = encoder.JSONEncoder
    app.add_api('swagger.yaml', arguments={'title': '{{appName}}'},
                    pythonic_params=True, validate_responses=True)
    app.app.wsgi_app = CorsHeaderMiddleware(app.app.wsgi_app)
   
    if os.getenv('FLASK_ENV') == 'production':
        app.app.config.from_object(ProductionConfig())
    else:
        app.app.config.from_object(DevelopmentConfig())
    
    # serves the frontend. connexion does not support `path` param type
    # so there is no good way to add a catch all path. We will probably
    # serve frontend separately in the future which should fix this. For
    # this should be good enough (catches pathes up to 4 steps deep)
    @app.route('/', defaults={'path': ''})
    @app.route('/<path>')
    @app.route('/<path1>/<path2>')
    @app.route('/<path1>/<path2>/<path3>')
    @app.route('/<path1>/<path2>/<path3>/<path4>')
    def frontend(**path):
        return app.app.send_static_file('index.html')
    
    app.run(port={{serverPort}})


if __name__ == '__main__':
    main()
